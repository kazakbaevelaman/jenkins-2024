template = '''
apiVersion: v1
kind: Pod
metadata:
  name: terraform
  labels:
    run: terraform
spec:
  containers:
  - name: terraform
    image: hashicorp/terraform
    command:
    - sleep
    - "3600"
    '''

properties([
    parameters([
        choice(choices: ['apply', 'destroy'], description: 'Provide your choice', name: 'action'),
        string(name: 'AMI_ID', defaultValue: '', description: 'Please provide AMI ID'),
        choice(name: 'REGION', choices: ['us-east-1', 'us-east-2', 'us-west-1', 'us-west-2'], description: 'Select AWS Region')
    ])
])


podTemplate(cloud: 'kubernetes', label: 'terraform', yaml: template) {
    node ("terraform") {
        container("terraform") {
    stage ("Pull code") {
        git branch: 'main', url: 'https://github.com/kazakbaevelaman/jenkins-2024.git'
    }
    withCredentials([usernamePassword(credentialsId: 'aws-creds', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
        stage ("Init") {
        sh """
        cd terraform
        terraform init
        """
        def tfvarsContent = """
ami_id = "${params.AMI_ID}"
region = "${params.REGION}"
        """
        writeFile file: 'terraform/terraform.tfvars', text: tfvarsContent
}
      
    if(params.action == "apply") {
        stage ("Apply") {
        sh """
        cd terraform
        terraform apply -var-file=terraform.tfvars -auto-approve
        """
      }
    }
    
    else {
        stage ("Destroy") {
        sh """
        cd terraform
        terraform destroy -var-file=terraform.tfvars -auto-approve
        """
          }
        }
      }

    }
  }
}
